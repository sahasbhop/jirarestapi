buildscript {
    ext {
        kotlin_version = "1.2.31"
        retrofit_version = "2.4.0"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'

group = 'com.github.sahasbhop'
version = '0.1'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile "com.esotericsoftware.yamlbeans:yamlbeans:1.12"
    compile "com.squareup.retrofit2:converter-gson:$retrofit_version"
    compile "com.squareup.retrofit2:retrofit:$retrofit_version"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.0'
    compile "commons-io:commons-io:2.5"
    compile "mysql:mysql-connector-java:6.0.6"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}

// ref: https://medium.com/@preslavrachev/kotlin-basics-create-executable-kotlin-jars-using-gradle-d17e9a8384b9
jar {
    manifest {
        attributes 'Main-Class': 'app.MainKt'
    }
    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task createJar(type: Jar) {
    archiveName = "app.jar"
    manifest {
        attributes 'Main-Class': 'app.MainKt'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyJar(type: Copy) {
    from createJar
    into "build/pack/app/scripts"
}

task copyResources(type: Copy) {
    from('resources') {
        exclude 'shell'
    }
    into "build/pack/app/scripts/resources"

}

task copyShells(type: Copy) {
    from "resources/shell"
    into "build/pack/app/scripts/"
}

task pack(dependsOn: [clean, createJar, copyJar, copyResources, copyShells])
